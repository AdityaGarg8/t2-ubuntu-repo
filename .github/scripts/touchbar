#!/bin/bash

# MIT License
# 
# Copyright (c) 2023 Aditya Garg
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS," WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

create_config () {
if [ ! -f /etc/tiny-dfr/config.toml ]
then
mkdir -p /etc/tiny-dfr
cp /usr/share/tiny-dfr/config.toml /etc/tiny-dfr/config.toml
fi
}

if [ -f /etc/modprobe.d/tiny-dfr.conf ]
then

case "$1" in

(--mode)
echo "Select Touch Bar mode"
echo
echo "0: Only show F1-F12"
echo "1: Show media and brightness controls, use the fn key to switch to F1-F12"
echo "2: Show F1-F12, use the fn key to switch to media and brightness controls"
echo "3: Only show media and brightness controls"
echo "4: Only show the escape key"
read tb
if [[ $tb != 0 && $tb != 1 && $tb != 2 && $tb != 3 && $tb != 4 ]]
then
echo "Invalid input. Aborting!"
exit 1
fi
echo "Changing default mode ..."
sed -i "s/options apple-touchbar fnmode=.*/options apple-touchbar fnmode=$tb/g" /etc/modprobe.d/tiny-dfr.conf
bash -c "echo $tb > /sys/class/input/*/device/fnmode"
echo "Done!"
;;

(--switch)
echo -e "Switching to advanced version\n"
dkms remove -m apple-touchbar -v 0.1 --all || true
dkms install -m apple-bce -v 0.2 --force || true
rm -v /etc/modprobe.d/tiny-dfr.conf
cp -v /usr/share/tiny-dfr/*.rules /etc/udev/rules.d
cp -v /usr/share/tiny-dfr/*.service /etc/systemd/system
systemctl enable tiny-dfr.service
echo -e "\nAdvanced version shall be enabled next time you restart your Mac"
;;

(*)
cat <<EOF
You are currently using the basic version of the touchbar.

This version is more stable than the advanced version and is recommended for those who just want basic functionality of Function keys and Media controls.

If you want a more feature filled and customisable touchbar, run \`sudo touchbar --switch\` to switch to the advanced Mode.

--mode    : Set the default touchbar mode
--switch  : Use advanced version of touchbar
EOF
;;

esac

else

case "$1" in

(--mode)
create_config

cat <<EOF
Enter the mode you want to be displayed by default on the touchbar:

1. Function keys
2. Media controls
3. Media controls + App shortcuts
EOF
read mode_no

case "$mode_no" in

(1)
cat <<EOF

Enter the mode you want to be displayed on the touchbar when fn key is pressed:

1. Media controls
2. Media controls + App shortcuts
EOF
read sp_ext

case "$sp_ext" in

(1)
sed -i "s/SpecialExtendedMode.*/SpecialExtendedMode = false/g" /etc/tiny-dfr/config.toml
;;

(2)
sed -i "s/SpecialExtendedMode.*/SpecialExtendedMode = true/g" /etc/tiny-dfr/config.toml
;;

(*)
echo "Invalid input. Aborting!"
exit 1
;;

esac

sed -i "s/MediaLayerDefault.*/MediaLayerDefault = false/g" /etc/tiny-dfr/config.toml
;;

(2)
sed -i "s/SpecialExtendedMode.*/SpecialExtendedMode = false/g" /etc/tiny-dfr/config.toml
sed -i "s/MediaLayerDefault.*/MediaLayerDefault = true/g" /etc/tiny-dfr/config.toml
;;

(3)
sed -i "s/SpecialExtendedMode.*/SpecialExtendedMode = true/g" /etc/tiny-dfr/config.toml
sed -i "s/MediaLayerDefault.*/MediaLayerDefault = true/g" /etc/tiny-dfr/config.toml
;;

(*)
echo "Invalid input. Aborting!"
exit 1
;;

esac

cat <<EOF

Mode set successfully!

Note: If your touchbar has frozen, try restarting the daemon first by running \`sudo touchbar --restart\`. If it doesn't work even after restarting 3 times, try using a different theme for your app icons. You can also run \`sudo tiny-dfr\` to get logs of any possible error.
EOF
;;

(--font)
create_config

cat <<EOF

Choose the font renderer you want to use

1. FreeType (Default renderer)
2. Cairo (Recommended if FreeType is not rendering font properly)
EOF
read renderer

echo -e "\nYou shall be shown list of installed fonts. Choose a font from the list you want to use."
echo
read -p "Press enter to continue"
echo
fc-list --format="%{family[0]}\n" | sort | uniq
echo -e "\nType the font from the above list you want to use and press enter."
read font
cat <<EOF

Enter the desired formatting option of the font you want:

1. Normal
2. Bold
3. Italic
4. Both Bold and Italic
EOF
read format

case "$renderer" in

(1)
sed -i "s/FontRenderer.*/FontRenderer = \"FreeType\"/g" /etc/tiny-dfr/config.toml
;;

(2)
sed -i "s/FontRenderer.*/FontRenderer = \"Cairo\"/g" /etc/tiny-dfr/config.toml
sed -i "s/FontStyle.*/FontStyle = \"${font}\"/g" /etc/tiny-dfr/config.toml
;;

(*)
echo "Invalid input. Aborting!"
exit 1
;;

esac

case "$format" in

(1)
if [[ $renderer = 1 ]]
then
sed -i "s/FontTemplate.*/FontTemplate = \"${font}\"/g" /etc/tiny-dfr/config.toml

elif [[ $renderer = 2 ]]
then
sed -i "s/Bold.*/Bold = false/g" /etc/tiny-dfr/config.toml
sed -i "s/Italic.*/Italic = false/g" /etc/tiny-dfr/config.toml

fi
;;

(2)
if [[ $renderer = 1 ]]
then
sed -i "s/FontTemplate.*/FontTemplate = \"${font}:bold\"/g" /etc/tiny-dfr/config.toml

elif [[ $renderer = 2 ]]
then
sed -i "s/Bold.*/Bold = true/g" /etc/tiny-dfr/config.toml
sed -i "s/Italic.*/Italic = false/g" /etc/tiny-dfr/config.toml

fi
;;

(3)
if [[ $renderer = 1 ]]
then
sed -i "s/FontTemplate.*/FontTemplate = \"${font}:italic\"/g" /etc/tiny-dfr/config.toml

elif [[ $renderer = 2 ]]
then
sed -i "s/Bold.*/Bold = false/g" /etc/tiny-dfr/config.toml
sed -i "s/Italic.*/Italic = true/g" /etc/tiny-dfr/config.toml

fi
;;

(4)
if [[ $renderer = 1 ]]
then
sed -i "s/FontTemplate.*/FontTemplate = \"${font}:bold:italic\"/g" /etc/tiny-dfr/config.toml

elif [[ $renderer = 2 ]]
then
sed -i "s/Bold.*/Bold = true/g" /etc/tiny-dfr/config.toml
sed -i "s/Italic.*/Italic = true/g" /etc/tiny-dfr/config.toml

fi
;;

(*)
echo "Invalid input. Aborting!"
exit 1
;;

esac

cat <<EOF

Font set successfully!

Note: If your touchbar has frozen, try restarting the daemon first by running \`sudo touchbar --restart\`. If it doesn't work even after restarting 3 times, try using a different theme for your app icons. You can also run \`sudo tiny-dfr\` to get logs of any possible error.
EOF
;;

(--icons)
create_config

echo -e "\nYou shall be shown list of installed icon themes. Choose an icon theme from the list you want to use."
echo
read -p "Press Enter to continue..."
echo
ls /usr/share/tiny-dfr/icons | sort
echo -e "\nType the icon theme from the above list you want to use and press enter."
read icon
sed -i "s/MediaIconTheme.*/MediaIconTheme = \"$icon\"/g" /etc/tiny-dfr/config.toml

cat <<EOF

Icon theme set successfully!

Note: If your touchbar has frozen, try restarting the daemon first by running \`sudo touchbar --restart\`. If it doesn't work even after restarting 3 times, try using a different theme for your app icons. You can also run \`sudo tiny-dfr\` to get logs of any possible error.
EOF
;;

(--apps)
create_config

echo "You shall be given a list of installed applications, the command which executes them and their icon name"
echo
read -p "Press Enter to continue..."
echo

get_desktop_entries () {
desktop_files_dir="/usr/share/applications"

for desktop_file in "$desktop_files_dir"/*.desktop; do
    if [ -f "$desktop_file" ]; then
        app_name=$(grep -m 1 '^Name=' "$desktop_file" | cut -d'=' -f2)
        app_exec=$(grep -m 1 '^Exec=' "$desktop_file" | cut -d'=' -f2)
        app_icon=$(grep -m 1 '^Icon=' "$desktop_file" | cut -d'=' -f2)
        echo "Name: $app_name"
        echo "Command: $app_exec"
        echo -e "Icon name: $app_icon\n"
    fi
done
}

get_desktop_entries

echo "Do you want to search for a particular app? (y/N)"
read input
if [[ ($input = y) || ($input = Y) ]]
then
echo -e "\nType the exact name of the app (case insensitive) and press enter"
read app_name
echo
get_desktop_entries | grep -A 2 -x -i "Name: ${app_name}"
echo
read -p "Press Enter to continue..."
fi

cat <<EOF

Now we shall be binding the key you wish to use as an app shortcut.

To do this, you need to use the settings of your Desktop Environment to add custom shortcuts (Eg: In GNOME, it is Settings > Keyboard > Keyboard Shortcuts > Custom Shortcuts).

You can be asked for Name, Command and Shortcut key when adding the shortcut.

Name field can be any name you wish to assign to that shortcut.

In the Command field, paste the command for your application from the list of apps displayed above.
Note: If the command of your app has a % in the end (Eg: gnome-text-editor %U), remove that (Eg after removing: gnome-text-editor)

For the Shortcut key, tap on the key on the touchbar you wish to assign.

EOF
read -p "After you have performed this setting, press Enter to continue..."

cat <<EOF


Now we shall be adding the app icon of your app to the touchbar.

You shall be displayed a list of installed themes in your system.

EOF
read -p "Press Enter to continue..."
echo
ls /usr/share/tiny-dfr | sort; ls /usr/share/icons | sort

cat <<EOF

From the list of themes displayed above type the theme you want to use for your apps and press enter. If you wanna use the theme set already, simply press enter without entering a theme name
EOF
read app_theme
if [[ $app_theme = "" ]]
then
true
else
sed -i "s/AppIconTheme.*/AppIconTheme = \"$app_theme\"/g" /etc/tiny-dfr/config.toml
fi

cat <<EOF

Now enter the position of the shortcut (1-4; 1 is app1 key, 2 is app2 and so on) on the touchbar you want to assign the app icon to.

If you just wanted to set the app theme, simply press enter without entering any value to continue.
EOF
read position
if [[ $position = "" ]]
then
cat <<EOF

Theme set successfully!

Note: If your touchbar has frozen, try restarting the daemon first by running \`sudo touchbar --restart\`. If it doesn't work even after restarting 3 times, try using a different theme for your app icons. You can also run \`sudo tiny-dfr\` to get logs of any possible error.
EOF
exit 0
else
position_new=Prog${position}
fi
cat <<EOF


From the list of apps that was displayed above, type the exact name of the icon and press enter.

EOF
read app_icon
sed -i "s/.*$position_new.*/        { Icon = \"$app_icon\", Action = \"$position_new\", Mode = \"App\"},/g" /etc/tiny-dfr/config.toml

cat <<EOF

App icon set successfully! 

Note: If your touchbar has frozen, try restarting the daemon first by running \`sudo touchbar --restart\`. If it doesn't work even after restarting 3 times, try using a different theme for your app icons. You can also run \`sudo tiny-dfr\` to get logs of any possible error.
EOF

#gsettings set org.gnome.shell.keybindings toggle-application-view "['<Super>a', 'LaunchB']"
;;

(--display)
create_config

cat <<EOF
Choose your desired setting:
1. Enable/disable pixel shifting:

   Enabling pixel shifting shall slowly shift the entire screen contents.
   In theory this helps with screen longevity.

2. Show/hide button outlines:

   Use this setting to hide button outlines of Media and Function keys.
   Enabling this will make this effect of pixel shifting less noticeable to the eye.

3. Enable/disable adaptive brightness:

   Use this setting to dim your touchbar automatically in case of low screen brightness.
EOF
read display_setting

case "$display_setting" in

(1)
cat <<EOF

Choose the desired option:

1. Enable pixel shifting
2. Disable pixel shifting
EOF
read pixel_setting

case "$pixel_setting" in

(1)
sed -i "s/EnablePixelShift.*/EnablePixelShift = true/g" /etc/tiny-dfr/config.toml
;;

(2)
sed -i "s/EnablePixelShift.*/EnablePixelShift = false/g" /etc/tiny-dfr/config.toml
;;

(*)
echo "Invalid input. Aborting!"
exit 1
;;

esac

;;

(2)
cat <<EOF

Choose the desired option:

1. Show button outlines
2. Hide button outlines
EOF
read button_outline

case "$button_outline" in

(1)
sed -i "s/ShowButtonOutlines.*/ShowButtonOutlines = true/g" /etc/tiny-dfr/config.toml
;;

(2)
sed -i "s/ShowButtonOutlines.*/ShowButtonOutlines = false/g" /etc/tiny-dfr/config.toml
;;

(*)
echo "Invalid input. Aborting!"
exit 1
;;

esac
;;

(3)
cat <<EOF

Choose the desired option:

1. Enable adaptive brightness
2. Disable adaptive brightness
EOF
read adaptive_brightness

case "$adaptive_brightness" in

(1)
sed -i "s/AdaptiveBrightness.*/AdaptiveBrightness = true/g" /etc/tiny-dfr/config.toml
;;

(2)
sed -i "s/AdaptiveBrightness.*/AdaptiveBrightness = false/g" /etc/tiny-dfr/config.toml
;;

(*)
echo "Invalid input. Aborting!"
exit 1
;;

esac
;;

(*)
echo "Invalid input. Aborting!"
exit 1
;;

esac

;;
(--time)
create_config

cat <<EOF

Choose the time format you want to use:

1. 12 hr
2. 24 hr
EOF
read time_format
if [[ $time_format = 1 ]]
then
format=12hr
elif [[ $time_format = 2 ]]
then
format=24hr
else
echo "Invalid input!"
exit 1
fi

cat <<EOF

Choose the locale you want to use:

If you want to use the same locale as your system, simply press enter.

If you want a locale other than the one used by your system, type the locale and then press enter.

Current locale used by your system: $(echo $LC_TIME | cut -d "." -f 1)
EOF
read locale
if [[ $locale = "" ]]
then
locale=$(echo $LC_TIME | cut -d "." -f 1)
fi

sed -i "s/.*Mode = \"Time\".*/    { Action = \"Time\",    Mode = \"Time\", Format = \"$format\", Locale = \"$locale\"},/g" /etc/tiny-dfr/config.toml

cat <<EOF

Locale changed successfully!

Note: If your touchbar has frozen, try restarting the daemon first by running \`sudo touchbar --restart\`. If it doesn't work even after restarting 3 times, try using a different theme for your app icons. You can also run \`sudo tiny-dfr\` to get logs of any possible error.
EOF

;;

(--restore)
create_config

if [ -f /etc/tiny-dfr/config.toml.orj ]
then
echo "Restoring previous configuration from /etc/tiny-dfr/config.toml.orj"
else
echo "No file found for backup"
exit 1
fi

cat <<EOF >/etc/tiny-dfr/config.toml
# tiny-dfr config template. Do not edit this file directly, instead
# copy it to /etc/tiny-dfr/config.toml and edit that copy.
# The daemon will merge those two files, giving preference to the one in /etc

# F{number} keys are shown when Fn is not pressed by default.
# Set this to true if you want the media keys to be shown without Fn pressed
MediaLayerDefault = false

# Set this to true if you want to show app shortcuts, date and time and other
# extended features in the Media layer.
SpecialExtendedMode = false

# Set this to false if you want to hide the button outline,
# leaving only the text/logo
ShowButtonOutlines = true

# Set this to true to slowly shift the entire screen contents.
# In theory this helps with screen longevity, but macos does not bother doing it
# Disabling ShowButtonOutlines will make this effect less noticeable to the eye
EnablePixelShift = false

# Set this to choose the font renderer.
# You can choose between "cairo" and "freetype"
FontRenderer = "freetype"

# Cairo font renderer settings:

# Set FontStyle to the name of the font to be used for cairo as a renderer
# Set Bold/Italic to true to enable this formatting
FontStyle = "sans-serif"
Bold = true
Italic = false

# FreeType font renderer settings:

# Set this to the fontconfig pattern to be used to pick a font for text labels
# Some examples are:
# "" - default regular sans-serif font
# ":bold" - default bold sans-serif font
# For full reference on accepted values see the fontconfig user guide,
# section "Font Names"
# https://www.freedesktop.org/software/fontconfig/fontconfig-user.html
FontTemplate = ":bold"

# Set this to the icon theme you want to use for Media controls.
# Theme can be from "/usr/share/tiny-dfr/icons", "/etc/tiny-dfr/icons" or "/usr/share/icons"
MediaIconTheme = "tiny-dfr-icons"

# Set this to the icon theme you want to use for App icons.
# Theme can be from "/usr/share/tiny-dfr/icons", "/etc/tiny-dfr/icons" or "/usr/share/icons"
AppIconTheme = "hicolor"

# Set this to false if you want the brightness of the touchbar
# to be set to a static value instead of following the primary
# screen's brightness
AdaptiveBrightness = true

# With adaptive brightness disabled this is used as the brightness
# in the active state
# With it enabled, this is the maximum point on the brightness curve
# Accepted values are 0-255
ActiveBrightness = 128

# This key defines the contents of the primary layer
# (the one with F{number} keys)
# You can change the individual buttons, add, or remove them
# Any number of keys that is greater than 0 is allowed
# however rendering will start to break around 24 keys
EOF

check_for_entry () {
local $1
cat /etc/tiny-dfr/config.toml.orj | grep -w $1 | grep -v "#"
}

for entry in "MediaLayerDefault" "SpecialExtendedMode" "ShowButtonOutlines" "EnablePixelShift" "FontRenderer" "FontStyle" "Bold" "Italic" "FontTemplate" "MediaIconTheme" "AppIconTheme" "AdaptiveBrightness" "ActiveBrightness"
do
checked_entry=$(check_for_entry $entry)
if [[ ${checked_entry} = "" ]]
then
true
else
sed -i "s/${entry}.*/${checked_entry}/g" /etc/tiny-dfr/config.toml || true
fi
done

layers () {
local $1
start_tag="$1 = ["
end_tag="]"

found_section=false

while IFS= read -r line; do
    if [[ $line == *"$start_tag"* ]]; then
        found_section=true
        echo "$line"
    elif $found_section; then
        echo "$line"
        if [[ $line == *"$end_tag"* ]]; then
            break
        fi
    fi
done < "/etc/tiny-dfr/config.toml.orj"
}

for layer in "PrimaryLayerKeys" "MediaLayerKeys" "AppLayerKeys1" "AppLayerKeys2" "AppLayerKeys3"
do
checked_layer=$(layers $layer)
if [[ ${checked_layer} = "" ]]
then
case ${layer} in

(PrimaryLayerKeys)
cat <<EOF >>/etc/tiny-dfr/config.toml
PrimaryLayerKeys = [
    # Action defines the key code to send when the button is pressed
    # Text defines the button label
    # Icon specifies the icon to be used for the button.
    # Icons can either be svgs or pngs, with svgs being preferred
    # For best results with pngs, they should be 48x48
    # Do not include the extension in the icon name.
    # Icons are looked up in /etc/tiny-dfr first and then in /usr/share/tiny-dfr
    # If you add a custom Path of icon, then that shall be used instead of icon name.
    # eg: Path = "/usr/share/pixmaps/discord.png" will use only the icon present
    # at this location
    # Mode = app will use AppIconTheme, Media will use MediaIconTheme for icons,
    # unless Path is specified.
    # You can also add Background = true or Background = false to show or
    # hide the button outline for individual buttons.
    # Only one of Text or Icon is allowed,
    # if both are present, the behavior is undefined.
    # For the list of supported key codes see
    # https://docs.rs/input-linux/latest/input_linux/enum.Key.html
    # Note that the escape key is not specified here, as it is added
    # automatically on Macs without a physical one
    { Text = "F1",  Action = "F1"  },
    { Text = "F2",  Action = "F2"  },
    { Text = "F3",  Action = "F3"  },
    { Text = "F4",  Action = "F4"  },
    { Text = "F5",  Action = "F5"  },
    { Text = "F6",  Action = "F6"  },
    { Text = "F7",  Action = "F7"  },
    { Text = "F8",  Action = "F8"  },
    { Text = "F9",  Action = "F9"  },
    { Text = "F10", Action = "F10" },
    { Text = "F11", Action = "F11" },
    { Text = "F12", Action = "F12" }
]
EOF
;;

(MediaLayerKeys)
cat <<EOF >>/etc/tiny-dfr/config.toml

# This key defines the contents of the media key layer
MediaLayerKeys = [
    { Icon = "display-brightness-low-symbolic",   Action = "BrightnessDown", Mode = "Media"},
    { Icon = "display-brightness-high-symbolic",  Action = "BrightnessUp",   Mode = "Media"},
    { Icon = "microphone-disabled-symbolic",      Action = "MicMute",        Mode = "Media"},
    { Icon = "system-search-symbolic",            Action = "Search",         Mode = "Media"},
    { Icon = "keyboard-brightness-low-symbolic",  Action = "IllumDown",      Mode = "Media"},
    { Icon = "keyboard-brightness-high-symbolic", Action = "IllumUp",        Mode = "Media"},
    { Icon = "media-seek-backward-symbolic",      Action = "PreviousSong",   Mode = "Media"},
    { Icon = "media-playback-start-symbolic",     Action = "PlayPause",      Mode = "Media"},
    { Icon = "media-seek-forward-symbolic",       Action = "NextSong",       Mode = "Media"},
    { Icon = "audio-volume-muted-symbolic",       Action = "Mute",           Mode = "Media"},
    { Icon = "audio-volume-low-symbolic",         Action = "VolumeDown",     Mode = "Media"},
    { Icon = "audio-volume-high-symbolic",        Action = "VolumeUp",       Mode = "Media"}
]
EOF
;;

(AppLayerKeys1)
cat <<EOF >>/etc/tiny-dfr/config.toml

# This key defines the contents of the main app key layer
# Macro1 key switches to AppLayerKeys1
# Macro2 key switches to AppLayerKeys2
# Macro3 key switches to AppLayerKeys3
AppLayerKeys1 = [
    { Icon = "app1",                          Action = "Prog1",      Mode = "App"},
    { Icon = "app2",                          Action = "Prog2",      Mode = "App"},
    { Icon = "app3",                          Action = "Prog3",      Mode = "App"},
    { Icon = "app4",                          Action = "Prog4",      Mode = "App"},
    { Icon = "go-next-symbolic",              Action = "Macro2",     Mode = "Media"},
    { Action = "Time",                        Mode = "Time",         Format = "24hr", Locale = "en_US"},
    { Action = "Unknown", Mode = "Blank"},
    { Action = "Unknown", Mode = "Blank"},
    { Icon = "audio-volume-low-symbolic",     Action = "VolumeDown", Mode = "Media"},
    { Icon = "audio-volume-high-symbolic",    Action = "VolumeUp",   Mode = "Media"},
    { Icon = "media-playback-start-symbolic", Action = "PlayPause",  Mode = "Media"},
    { Icon = "system-search-symbolic",        Action = "Search",     Mode = "Media"},
    { Icon = "go-next-symbolic",              Action = "Macro3",     Mode = "Media"}
]
EOF
;;

(AppLayerKeys2)
cat <<EOF >>/etc/tiny-dfr/config.toml

# This key defines the contents of the app key layer showing additional apps
AppLayerKeys2 = [
    { Icon = "go-previous-symbolic",            Action = "Macro1",          Mode = "Media"},
    { Icon = "web-browser-symbolic",            Action = "WWW",             Mode = "Media", Background = false},
    { Icon = "accessories-calculator-symbolic", Action = "Calc",            Mode = "Media", Background = false},
    { Icon = "system-file-manager-symbolic",    Action = "File",            Mode = "Media", Background = false},
    { Icon = "view-app-grid-symbolic",          Action = "AllApplications", Mode = "Media", Background = false},
    { Action = "Time",                          Mode = "Time",              Format = "24hr", Locale = "en_US"},
    { Action = "Unknown", Mode = "Blank"},
    { Action = "Unknown", Mode = "Blank"},
    { Icon = "audio-volume-low-symbolic",       Action = "VolumeDown",      Mode = "Media"},
    { Icon = "audio-volume-high-symbolic",      Action = "VolumeUp",        Mode = "Media"},
    { Icon = "media-playback-start-symbolic",   Action = "PlayPause",       Mode = "Media"},
    { Icon = "system-search-symbolic",          Action = "Search",          Mode = "Media"},
    { Icon = "go-next-symbolic",                Action = "Macro3",          Mode = "Media"}
]
EOF
;;

(AppLayerKeys3)
cat <<EOF >>/etc/tiny-dfr/config.toml

# This key defines the contents of the app key layer showing all media icons
AppLayerKeys3 = [
    { Icon = "go-previous-symbolic",              Action = "Macro1",         Mode = "Media"},
    { Icon = "display-brightness-low-symbolic",   Action = "BrightnessDown", Mode = "Media"},
    { Icon = "display-brightness-high-symbolic",  Action = "BrightnessUp",   Mode = "Media"},
    { Icon = "microphone-disabled-symbolic",      Action = "MicMute",        Mode = "Media"},
    { Icon = "keyboard-brightness-low-symbolic",  Action = "IllumDown",      Mode = "Media"},
    { Icon = "keyboard-brightness-high-symbolic", Action = "IllumUp",        Mode = "Media"},
    { Icon = "media-seek-backward-symbolic",      Action = "PreviousSong",   Mode = "Media"},
    { Icon = "media-playback-start-symbolic",     Action = "PlayPause",      Mode = "Media"},
    { Icon = "media-seek-forward-symbolic",       Action = "NextSong",       Mode = "Media"},
    { Icon = "audio-volume-muted-symbolic",       Action = "Mute",           Mode = "Media"},
    { Icon = "audio-volume-low-symbolic",         Action = "VolumeDown",     Mode = "Media"},
    { Icon = "audio-volume-high-symbolic",        Action = "VolumeUp",       Mode = "Media"}
]
EOF
;;
esac

else
echo -e "\n${checked_layer}" >> /etc/tiny-dfr/config.toml
fi
done

cat <<EOF

Restored successfully!

Note: If your touchbar has frozen, try restarting the daemon first by running \`sudo touchbar --restart\`. If it doesn't work even after restarting 3 times, try using a different theme for your app icons. You can also run \`sudo tiny-dfr\` to get logs of any possible error.
EOF
;;

(--switch)
echo -e "Switching to basic version\n"
cat <<EOF > /etc/modprobe.d/tiny-dfr.conf
blacklist appletbdrm
blacklist hid_appletb_kbd
blacklist hid_appletb_bl

options apple-touchbar fnmode=1
EOF
systemctl disable tiny-dfr.service
for rule in /usr/share/tiny-dfr/*.rules
do
rule_file=$(echo $rule | rev | cut -d "/" -f 1 | rev)
rm -v /etc/udev/rules.d/$rule_file
done
for service in /usr/share/tiny-dfr/*.service
do
service_file=$(echo $service | rev | cut -d "/" -f 1 | rev)
rm -v /etc/systemd/system/$service_file
done
dkms remove -m apple-bce -v 0.2 --all || true
dkms install -m apple-touchbar -v 0.1 --force || true
echo -e "\nBasic version shall be enabled next time you restart your Mac"
;;

(--restart)
echo "Restarting the daemon"
systemctl disable --now tiny-dfr.service
sleep 3
systemctl enable --now tiny-dfr.service
;;
(*)
cat <<EOF
You are currently using the advanced version of the touchbar.

This version is still buggy and is recommended for those who want to customise their touchbar as per their needs.

If you want a more stable touchbar, that only has Function keys and Media controls, run \`sudo touchbar --switch\` to switch to the basic Mode.

--mode    : Set the default touchbar mode
--font    : Set font for the function keys
--icons   : Set the icon theme for the media control icons and utility apps
--apps    : Setup app shortcuts
--display : Enable/disable pixel shifting, displaying of button outlines and adaptive brightness
--time    : Choose between 12 and 24 hr clock
--restore : Restore a previous configuration stored at /etc/tiny-dfr/config.toml.orj
--restart : Restart the daemon (Useful if touchbar has frozen)
--switch  : Use basic version of touchbar
EOF
;;

esac

fi
